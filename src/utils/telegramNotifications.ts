// Telegram Bot API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const TELEGRAM_BOT_TOKEN = 'YOUR_BOT_TOKEN'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const TELEGRAM_CHAT_ID = 'YOUR_CHAT_ID'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat ID

interface TelegramNotification {
  type: 'modal_opened' | 'failed_lead' | 'successful_lead';
  data: any;
}

export const sendTelegramNotification = async (notification: TelegramNotification) => {
  try {
    let message = '';
    
    switch (notification.type) {
      case 'modal_opened':
        message = `üîî *–ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –û–¢–ö–†–´–¢–û*\n\n` +
                 `‚è∞ –í—Ä–µ–º—è: ${new Date(notification.data.modalOpenedAt).toLocaleString('ru-RU')}\n` +
                 `üåê URL: ${notification.data.url}\n` +
                 `üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${notification.data.isMobile ? '–ú–æ–±–∏–ª—å–Ω–æ–µ' : '–î–µ—Å–∫—Ç–æ–ø'}\n` +
                 `üîó Referrer: ${notification.data.referrer || '–ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥'}\n` +
                 `üÜî Session ID: ${notification.data.sessionId}\n\n` +
                 `üëÄ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Ñ–æ—Ä–º—É!*`;
        break;
        
      case 'failed_lead':
        const timeSpent = Math.round(notification.data.timeSpentInModal / 1000);
        const reasonEmoji = {
          'closed_after_interaction': '‚ùå',
          'closed_without_interaction': 'üëª',
          'browser_closed': 'üö™',
          'tab_switched': 'üîÑ'
        };
        
        const reasonText = {
          'closed_after_interaction': '–ó–∞–∫—Ä—ã–ª –ø–æ—Å–ª–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è',
          'closed_without_interaction': '–ó–∞–∫—Ä—ã–ª –±–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è',
          'browser_closed': '–ó–∞–∫—Ä—ã–ª –±—Ä–∞—É–∑–µ—Ä',
          'tab_switched': '–ü–µ—Ä–µ–∫–ª—é—á–∏–ª –≤–∫–ª–∞–¥–∫—É'
        };
        
        message = `üö® *–ù–ï–£–î–ê–í–®–ò–ô–°–Ø –õ–ò–î*\n\n` +
                 `${reasonEmoji[notification.data.reason as keyof typeof reasonEmoji]} –ü—Ä–∏—á–∏–Ω–∞: ${reasonText[notification.data.reason as keyof typeof reasonText]}\n` +
                 `‚è±Ô∏è –í—Ä–µ–º—è –≤ –º–æ–¥–∞–ª–∫–µ: ${timeSpent} —Å–µ–∫\n` +
                 `ü§ù –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª: ${notification.data.userInteracted ? '–î–∞ ‚úÖ' : '–ù–µ—Ç ‚ùå'}\n` +
                 `üìù –ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª: ${notification.data.formData?.contact ? `"${notification.data.formData.contact}"` : '–ù–µ—Ç'}\n` +
                 `üåê URL: ${notification.data.url}\n` +
                 `üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${notification.data.isMobile ? '–ú–æ–±–∏–ª—å–Ω–æ–µ' : '–î–µ—Å–∫—Ç–æ–ø'}\n` +
                 `üÜî Session ID: ${notification.data.sessionId}`;
        break;
        
      case 'successful_lead':
        message = `‚úÖ *–£–°–ü–ï–®–ù–´–ô –õ–ò–î!*\n\n` +
                 `üéâ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞!*\n\n` +
                 `üìû –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä: ${notification.data.formData.messenger.toUpperCase()}\n` +
                 `üì± –ö–æ–Ω—Ç–∞–∫—Ç: \`${notification.data.formData.contact}\`\n` +
                 `‚è∞ –í—Ä–µ–º—è: ${new Date(notification.data.submittedAt).toLocaleString('ru-RU')}\n` +
                 `üÜî Lead ID: ${notification.data.id}\n\n` +
                 `üí∞ *–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º!*`;
        break;
    }
    
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      })
    });
    
    if (!response.ok) {
      throw new Error(`Telegram API error: ${response.status}`);
    }
    
    console.log(`üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: ${notification.type}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    
    // Fallback - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    const failedNotifications = JSON.parse(localStorage.getItem('failedTelegramNotifications') || '[]');
    failedNotifications.push({
      ...notification,
      failedAt: Date.now(),
      retryCount: 0
    });
    localStorage.setItem('failedTelegramNotifications', JSON.stringify(failedNotifications));
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—É–¥–∞–≤—à–∏—Ö—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export const retryFailedNotifications = async () => {
  const failedNotifications = JSON.parse(localStorage.getItem('failedTelegramNotifications') || '[]');
  
  if (failedNotifications.length === 0) return;
  
  const successfulRetries: number[] = [];
  
  for (let i = 0; i < failedNotifications.length; i++) {
    const notification = failedNotifications[i];
    
    if (notification.retryCount < 3) { // –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏
      try {
        await sendTelegramNotification({
          type: notification.type,
          data: notification.data
        });
        successfulRetries.push(i);
      } catch (error) {
        notification.retryCount++;
        console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${notification.retryCount}/3 –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${notification.type}`);
      }
    }
  }
  
  // –£–¥–∞–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const remainingNotifications = failedNotifications.filter((_, index) => !successfulRetries.includes(index));
  localStorage.setItem('failedTelegramNotifications', JSON.stringify(remainingNotifications));
  
  if (successfulRetries.length > 0) {
    console.log(`‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${successfulRetries.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
  }
};

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
export const getDeviceInfo = () => {
  const userAgent = navigator.userAgent;
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);
  
  let deviceType = 'Desktop';
  if (/iPad/i.test(userAgent)) deviceType = 'iPad';
  else if (/iPhone/i.test(userAgent)) deviceType = 'iPhone';
  else if (/Android/i.test(userAgent)) deviceType = 'Android';
  else if (isMobile) deviceType = 'Mobile';
  
  return {
    isMobile,
    deviceType,
    userAgent: userAgent.substring(0, 100) // –û–±—Ä–µ–∑–∞–µ–º –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
  };
};